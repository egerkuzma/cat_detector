import cv2
import numpy as np
import tflite_runtime.interpreter as tflite
import time
import os
import RPi.GPIO as GPIO
from datetime import datetime

# GPIO-–ø–∏–Ω—ã –¥–ª—è 3 –±–µ–ª—ã—Ö —Å–≤–µ—Ç–æ–¥–∏–æ–¥–æ–≤
LED_PINS = [18, 23, 24]  # –ö–∞–∂–¥—ã–π —Å–≤–µ—Ç–æ–¥–∏–æ–¥ –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ —Ä–∞–∑–Ω–æ–º—É GND
PWM_DUTY_CYCLE = 50  # 50% –º–æ—â–Ω–æ—Å—Ç–∏, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å GPIO

# –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–≤–µ—Ç–æ–¥–∏–æ–¥–æ–≤ (5 –º–∏–Ω—É—Ç = 300 —Å–µ–∫—É–Ω–¥)
LIGHT_ON_DURATION = 60
light_on_time = 0  # –ö–æ–≥–¥–∞ –≤–∫–ª—é—á–∏–ª–∏ —Å–≤–µ—Ç
light_on = False  # –§–ª–∞–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–≤–µ—Ç–∞

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º GPIO
GPIO.setmode(GPIO.BCM)
for pin in LED_PINS:
    GPIO.setup(pin, GPIO.OUT)

# –°–æ–∑–¥–∞—ë–º PWM –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –º–æ—â–Ω–æ—Å—Ç–∏
pwm_leds = [GPIO.PWM(pin, 1000) for pin in LED_PINS]
for pwm in pwm_leds:
    pwm.start(0)  # –°–≤–µ—Ç–æ–¥–∏–æ–¥—ã –≤—ã–∫–ª—é—á–µ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
IMAGE_PATH = "/home/pi/cam/image.jpg"
SAVE_PATH = "/home/pi/cam/"
MODEL_PATH = "/home/pi/detect.tflite"
LABELS_PATH = "/home/pi/coco_labels.txt"

# URL –∫–∞–º–µ—Ä—ã
CAMERA_URL = "http://ip/IMAGE.JPG?cidx=$(date +%s)"
WGET_COMMAND = f'wget --user=admin --password="" -q -O {IMAGE_PATH} "{CAMERA_URL}"' #–¥–ª—è d-link dcs-910
# –î–∞–Ω–Ω—ã–µ –¥–ª—è Telegram
BOT_TOKEN = "token"
CHAT_ID = "chat_id"
TELEGRAM_PHOTO_URL = f"https://api.telegram.org/bot{BOT_TOKEN}/sendPhoto"

# –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
last_sent_time = 0
NOTIFICATION_INTERVAL = 10  #–∫–∞–∂–¥—ã–µ 10 —Å–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ—Ç–∞ –≤ —Ç–µ–ª–µ–≥—É, –æ–Ω –º–æ–∂–µ—Ç –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–¥—Ç–∏ –∏ –Ω–µ –ø–æ–µ—Å—Ç—å

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª–∞—Å—Å—ã (–∫–æ—Ç = 17 –≤ COCO)
with open(LABELS_PATH, "r") as f:
    labels = {i: line.strip() for i, line in enumerate(f.readlines())}

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
interpreter = tflite.Interpreter(model_path=MODEL_PATH)
interpreter.allocate_tensors()
input_details = interpreter.get_input_details()
output_details = interpreter.get_output_details()

print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ—Ç–∞...")

def check_brightness(image):
    """ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–µ–¥–Ω—é—é —è—Ä–∫–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è """
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    brightness = np.mean(gray)
    print(f"üí° –¢–µ–∫—É—â–∞—è –æ—Å–≤–µ—â—ë–Ω–Ω–æ—Å—Ç—å: {brightness}")
    return brightness

def turn_on_leds():
    """ –í–∫–ª—é—á–∞–µ–º —Å–≤–µ—Ç–æ–¥–∏–æ–¥—ã (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è —è—Ä–∫–æ—Å—Ç—å) """
    for pwm in pwm_leds:
        pwm.ChangeDutyCycle(PWM_DUTY_CYCLE)  # 50% –º–æ—â–Ω–æ—Å—Ç–∏
    print("üí° –°–≤–µ—Ç–æ–¥–∏–æ–¥—ã –í–ö–õ–Æ–ß–ï–ù–´")

def turn_off_leds():
    """ –í—ã–∫–ª—é—á–∞–µ–º —Å–≤–µ—Ç–æ–¥–∏–æ–¥—ã """
    for pwm in pwm_leds:
        pwm.ChangeDutyCycle(0)  # 0% –º–æ—â–Ω–æ—Å—Ç–∏
    print("üí° –°–≤–µ—Ç–æ–¥–∏–æ–¥—ã –í–´–ö–õ–Æ–ß–ï–ù–´")

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
while True:
    os.system(WGET_COMMAND)

    if not os.path.exists(IMAGE_PATH):
        print("‚ö†Ô∏è –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        time.sleep(1)
        continue

    frame = cv2.imread(IMAGE_PATH)
    if frame is None:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!")
        time.sleep(1)
        continue

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç—å
    brightness = check_brightness(frame)

    if brightness < 30 and not light_on:
        turn_on_leds()
        light_on = True
        light_on_time = current_time  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –≤–∫–ª—é—á–µ–Ω–∏—è

    if light_on and (current_time - light_on_time > LIGHT_ON_DURATION):
        turn_off_leds()
        light_on = False  # –û–±–Ω—É–ª—è–µ–º —Ñ–ª–∞–≥


    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–µ–ª–∏
    input_shape = input_details[0]['shape']
    img_resized = cv2.resize(frame, (input_shape[1], input_shape[2]))
    input_data = np.expand_dims(img_resized, axis=0).astype(np.uint8)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–π—Ä–æ—Å–µ—Ç—å
    interpreter.set_tensor(input_details[0]['index'], input_data)
    interpreter.invoke()

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    boxes = interpreter.get_tensor(output_details[0]['index'])
    classes = interpreter.get_tensor(output_details[1]['index'])
    scores = interpreter.get_tensor(output_details[2]['index'])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ—Ç (–∫–ª–∞—Å—Å 17)
    found_cat = any(scores[0][i] > 0.5 and int(classes[0][i]) == 17 for i in range(len(scores[0])))

    current_time = time.time()

    if found_cat and (current_time - last_sent_time > NOTIFICATION_INTERVAL):
        print("üê± –ö–û–¢ –û–ë–ù–ê–†–£–ñ–ï–ù!")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
        timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        cat_photo_path = os.path.join(SAVE_PATH, f"cat_{timestamp}.jpg")
        cv2.imwrite(cat_photo_path, frame)
        print(f"üì∏ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {cat_photo_path}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ Telegram
        send_photo_cmd = f'curl -s -X POST "{TELEGRAM_PHOTO_URL}" -F chat_id="{CHAT_ID}" -F photo="@{cat_photo_path}" -F caption="üê± –ö–æ—Ç –ø—Ä–∏—à–µ–ª!"'
        os.system(send_photo_cmd)
        last_sent_time = current_time  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        print("üì® –§–æ—Ç–æ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram!")
    else:
        print("‚ùå –ö–æ—Ç–∞ –Ω–µ—Ç –∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–µ–¥–∞–≤–Ω–æ.")

    time.sleep(1)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É
